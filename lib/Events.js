"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 2.2.4
(function () {
  var BottleneckError, Events;

  BottleneckError = require("./BottleneckError");

  Events = function () {
    function Events(instance) {
      var _this = this;

      (0, _classCallCheck3.default)(this, Events);

      this.instance = instance;
      this._events = {};
      this.instance.on = function (name, cb) {
        return _this._addListener(name, "many", cb);
      };
      this.instance.once = function (name, cb) {
        return _this._addListener(name, "once", cb);
      };
      this.instance.removeAllListeners = function () {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        if (name != null) {
          return delete _this._events[name];
        } else {
          return _this._events = {};
        }
      };
    }

    (0, _createClass3.default)(Events, [{
      key: "_addListener",
      value: function _addListener(name, status, cb) {
        var base;
        if ((base = this._events)[name] == null) {
          base[name] = [];
        }
        this._events[name].push({ cb: cb, status: status });
        return this.instance;
      }
    }, {
      key: "trigger",
      value: function trigger(name, args) {
        var _this2 = this;

        if (name !== "debug") {
          this.trigger("debug", ["Event triggered: " + name, args]);
        }
        if (name === "dropped" && this.instance.rejectOnDrop) {
          args.forEach(function (job) {
            return job.cb.apply({}, [new BottleneckError("This job has been dropped by Bottleneck")]);
          });
        }
        if (this._events[name] == null) {
          return;
        }
        this._events[name] = this._events[name].filter(function (listener) {
          return listener.status !== "none";
        });
        return this._events[name].forEach(function (listener) {
          var e, ret;
          if (listener.status === "none") {
            return;
          }
          if (listener.status === "once") {
            listener.status = "none";
          }
          try {
            ret = listener.cb.apply({}, args);
            if (typeof (ret != null ? ret.then : void 0) === "function") {
              return ret.then(function () {}).catch(function (e) {
                return _this2.trigger("error", [e]);
              });
            }
          } catch (error) {
            e = error;
            if ("name" !== "error") {
              return _this2.trigger("error", [e]);
            }
          }
        });
      }
    }]);
    return Events;
  }();

  module.exports = Events;
}).call(undefined);