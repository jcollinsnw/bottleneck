"use strict";

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _toArray2 = require("babel-runtime/helpers/toArray");

var _toArray3 = _interopRequireDefault(_toArray2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 2.2.4
(function () {
  var DLList,
      Sync,
      splice = [].splice;

  DLList = require("./DLList");

  Sync = function () {
    function Sync(name) {
      (0, _classCallCheck3.default)(this, Sync);

      this.submit = this.submit.bind(this);
      this.schedule = this.schedule.bind(this);
      this.name = name;
      this._running = 0;
      this._queue = new DLList();
    }

    (0, _createClass3.default)(Sync, [{
      key: "isEmpty",
      value: function isEmpty() {
        return this._queue.length === 0;
      }
    }, {
      key: "_tryToRun",
      value: function _tryToRun() {
        var _this = this;

        var next;
        if (this._running < 1 && this._queue.length > 0) {
          this._running++;
          next = this._queue.shift();
          return next.task.apply({}, next.args.concat(function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            var ref;
            _this._running--;
            _this._tryToRun();
            return (ref = next.cb) != null ? ref.apply({}, args) : void 0;
          }));
        }
      }
    }, {
      key: "submit",
      value: function submit(task) {
        var _ref, _ref2, _splice$call, _splice$call2;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        var cb, ref;
        ref = args, (_ref = ref, _ref2 = (0, _toArray3.default)(_ref), args = _ref2.slice(0), _ref), (_splice$call = splice.call(args, -1), _splice$call2 = (0, _slicedToArray3.default)(_splice$call, 1), cb = _splice$call2[0], _splice$call);
        this._queue.push({ task: task, args: args, cb: cb });
        return this._tryToRun();
      }
    }, {
      key: "schedule",
      value: function schedule(task) {
        var _this2 = this;

        for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }

        var wrapped;
        wrapped = function wrapped() {
          var _ref3, _ref4, _splice$call3, _splice$call4;

          for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          var cb, ref;
          ref = args, (_ref3 = ref, _ref4 = (0, _toArray3.default)(_ref3), args = _ref4.slice(0), _ref3), (_splice$call3 = splice.call(args, -1), _splice$call4 = (0, _slicedToArray3.default)(_splice$call3, 1), cb = _splice$call4[0], _splice$call3);
          return task.apply({}, args).then(function () {
            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }

            return cb.apply({}, Array.prototype.concat(null, args));
          }).catch(function () {
            for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              args[_key6] = arguments[_key6];
            }

            return cb.apply({}, args);
          });
        };
        return new Promise(function (resolve, reject) {
          return _this2.submit.apply({}, Array.prototype.concat(wrapped, args, function () {
            for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }

            return (args[0] != null ? reject : (args.shift(), resolve)).apply({}, args);
          }));
        });
      }
    }]);
    return Sync;
  }();

  module.exports = Sync;
}).call(undefined);