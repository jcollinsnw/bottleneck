"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 2.2.4
(function () {
  var BottleneckError, DLList, Local, parser;

  parser = require("./parser");

  DLList = require("./DLList");

  BottleneckError = require("./BottleneckError");

  Local = function () {
    function Local(options) {
      (0, _classCallCheck3.default)(this, Local);

      parser.load(options, options, this);
      this._nextRequest = Date.now();
      this._running = 0;
      this._executing = {};
      this._unblockTime = 0;
      this.ready = this.yieldLoop();
      this.clients = {};
    }

    (0, _createClass3.default)(Local, [{
      key: "disconnect",
      value: function disconnect(flush) {
        return this;
      }
    }, {
      key: "yieldLoop",
      value: function yieldLoop() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        return new this.Promise(function (resolve, reject) {
          return setTimeout(resolve, t);
        });
      }
    }, {
      key: "computePenalty",
      value: function computePenalty() {
        var ref;
        return (ref = this.penalty) != null ? ref : 15 * this.minTime || 5000;
      }
    }, {
      key: "__updateSettings__",
      value: function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(options) {
          return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.yieldLoop();

                case 2:
                  parser.overwrite(options, options, this);
                  return _context.abrupt("return", true);

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function __updateSettings__(_x2) {
          return _ref.apply(this, arguments);
        }

        return __updateSettings__;
      }()
    }, {
      key: "__running__",
      value: function () {
        var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
          return _regenerator2.default.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return this.yieldLoop();

                case 2:
                  return _context2.abrupt("return", this._running);

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function __running__() {
          return _ref2.apply(this, arguments);
        }

        return __running__;
      }()
    }, {
      key: "__groupCheck__",
      value: function () {
        var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(time) {
          return _regenerator2.default.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.yieldLoop();

                case 2:
                  return _context3.abrupt("return", this._nextRequest + this._groupTimeout < time);

                case 3:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function __groupCheck__(_x3) {
          return _ref3.apply(this, arguments);
        }

        return __groupCheck__;
      }()
    }, {
      key: "conditionsCheck",
      value: function conditionsCheck(weight) {
        return (this.maxConcurrent == null || this._running + weight <= this.maxConcurrent) && (this.reservoir == null || this.reservoir - weight >= 0);
      }
    }, {
      key: "__incrementReservoir__",
      value: function () {
        var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(incr) {
          return _regenerator2.default.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.yieldLoop();

                case 2:
                  return _context4.abrupt("return", this.reservoir += incr);

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function __incrementReservoir__(_x4) {
          return _ref4.apply(this, arguments);
        }

        return __incrementReservoir__;
      }()
    }, {
      key: "__currentReservoir__",
      value: function () {
        var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
          return _regenerator2.default.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.yieldLoop();

                case 2:
                  return _context5.abrupt("return", this.reservoir);

                case 3:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function __currentReservoir__() {
          return _ref5.apply(this, arguments);
        }

        return __currentReservoir__;
      }()
    }, {
      key: "isBlocked",
      value: function isBlocked(now) {
        return this._unblockTime >= now;
      }
    }, {
      key: "check",
      value: function check(weight, now) {
        return this.conditionsCheck(weight) && this._nextRequest - now <= 0;
      }
    }, {
      key: "__check__",
      value: function () {
        var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(weight) {
          var now;
          return _regenerator2.default.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this.yieldLoop();

                case 2:
                  now = Date.now();
                  return _context6.abrupt("return", this.check(weight, now));

                case 4:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function __check__(_x5) {
          return _ref6.apply(this, arguments);
        }

        return __check__;
      }()
    }, {
      key: "__register__",
      value: function () {
        var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(index, weight, expiration) {
          var _this = this;

          var now, wait;
          return _regenerator2.default.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return this.yieldLoop();

                case 2:
                  now = Date.now();

                  if (!this.conditionsCheck(weight)) {
                    _context7.next = 12;
                    break;
                  }

                  this._running += weight;
                  this._executing[index] = {
                    timeout: expiration != null ? setTimeout(function () {
                      if (!_this._executing[index].freed) {
                        _this._executing[index].freed = true;
                        return _this._running -= weight;
                      }
                    }, expiration) : void 0,
                    freed: false
                  };
                  if (this.reservoir != null) {
                    this.reservoir -= weight;
                  }
                  wait = Math.max(this._nextRequest - now, 0);
                  this._nextRequest = now + wait + this.minTime;
                  return _context7.abrupt("return", {
                    success: true,
                    wait: wait,
                    reservoir: this.reservoir
                  });

                case 12:
                  return _context7.abrupt("return", {
                    success: false
                  });

                case 13:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function __register__(_x6, _x7, _x8) {
          return _ref7.apply(this, arguments);
        }

        return __register__;
      }()
    }, {
      key: "strategyIsBlock",
      value: function strategyIsBlock() {
        return this.strategy === 3;
      }
    }, {
      key: "__submit__",
      value: function () {
        var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(queueLength, weight) {
          var blocked, now, reachedHWM;
          return _regenerator2.default.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return this.yieldLoop();

                case 2:
                  if (!(this.maxConcurrent != null && weight > this.maxConcurrent)) {
                    _context8.next = 4;
                    break;
                  }

                  throw new BottleneckError("Impossible to add a job having a weight of " + weight + " to a limiter having a maxConcurrent setting of " + this.maxConcurrent);

                case 4:
                  now = Date.now();
                  reachedHWM = this.highWater != null && queueLength === this.highWater && !this.check(weight, now);
                  blocked = this.strategyIsBlock() && (reachedHWM || this.isBlocked(now));
                  if (blocked) {
                    this._unblockTime = now + this.computePenalty();
                    this._nextRequest = this._unblockTime + this.minTime;
                  }
                  return _context8.abrupt("return", {
                    reachedHWM: reachedHWM,
                    blocked: blocked,
                    strategy: this.strategy
                  });

                case 9:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function __submit__(_x9, _x10) {
          return _ref8.apply(this, arguments);
        }

        return __submit__;
      }()
    }, {
      key: "__free__",
      value: function () {
        var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(index, weight) {
          return _regenerator2.default.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.yieldLoop();

                case 2:
                  clearTimeout(this._executing[index].timeout);
                  if (!this._executing[index].freed) {
                    this._executing[index].freed = true;
                    this._running -= weight;
                  }
                  return _context9.abrupt("return", {
                    running: this._running
                  });

                case 5:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function __free__(_x11, _x12) {
          return _ref9.apply(this, arguments);
        }

        return __free__;
      }()
    }]);
    return Local;
  }();

  module.exports = Local;
}).call(undefined);